{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"BetokenJS Javascript API for managing the Betoken fund. Getting Started 1. Install via npm npm install --save betoken-js 2. Import BetokenJS const BetokenAPI = require('betoken-js'); 3. Initialize BetokenJS with your web3 provider & Ethereum private key const web3Provider = 'wss://mainnet.infura.io/ws/v3/...'; const privateKey = '0xdeadbeef'; const betoken = await BetokenAPI(web3Provider, privateKey);","title":"Home"},{"location":"#betokenjs","text":"Javascript API for managing the Betoken fund.","title":"BetokenJS"},{"location":"#getting-started","text":"","title":"Getting Started"},{"location":"#1-install-via-npm","text":"npm install --save betoken-js","title":"1. Install via npm"},{"location":"#2-import-betokenjs","text":"const BetokenAPI = require('betoken-js');","title":"2. Import BetokenJS"},{"location":"#3-initialize-betokenjs-with-your-web3-provider-ethereum-private-key","text":"const web3Provider = 'wss://mainnet.infura.io/ws/v3/...'; const privateKey = '0xdeadbeef'; const betoken = await BetokenAPI(web3Provider, privateKey);","title":"3. Initialize BetokenJS with your web3 provider &amp; Ethereum private key"},{"location":"api/investor-actions/","text":"betoken.investor-actions Allows the user to deposit/withdraw their money in the Betoken fund.","title":"betoken.investor-actions"},{"location":"api/investor-actions/#betokeninvestor-actions","text":"Allows the user to deposit/withdraw their money in the Betoken fund.","title":"betoken.investor-actions"},{"location":"api/manager-actions/","text":"betoken.manager-actions Allows the user to create investments and margin orders, sell them, and maintain the collateration of margin orders.","title":"betoken.manager-actions"},{"location":"api/manager-actions/#betokenmanager-actions","text":"Allows the user to create investments and margin orders, sell them, and maintain the collateration of margin orders.","title":"betoken.manager-actions"},{"location":"api/refresh/","text":"betoken.refresh-actions Allows the user to refresh the data.","title":"betoken.refresh-actions"},{"location":"api/refresh/#betokenrefresh-actions","text":"Allows the user to refresh the data.","title":"betoken.refresh-actions"},{"location":"api/stats/","text":"betoken.stats Provides statistics of the Betoken fund.","title":"betoken.stats"},{"location":"api/stats/#betokenstats","text":"Provides statistics of the Betoken fund.","title":"betoken.stats"},{"location":"api/timer/","text":"betoken.timer Provides info regarding Betoken's investment cycle. betoken.timer.timeTillPhaseEnd() Returns Number : the time left until the end of the current investment phase, in seconds. betoken.timer.phase() Returns Number : the id of the current investment phase: - 0 for the Intermission phase - 1 for the Manage phase betoken.timer.phaseStartTime() Returns Number : the Unix timestamp at which the current investment phase began, in seconds. betoken.timer.phaseLengths() Returns Array<Number> : the lengths of the investment phases, in seconds, indexed by the phases' ids (see betoken.timer.phase() ) betoken.timer.cycle() Returns Number : the current cycle number.","title":"betoken.timer"},{"location":"api/timer/#betokentimer","text":"Provides info regarding Betoken's investment cycle.","title":"betoken.timer"},{"location":"api/timer/#betokentimertimetillphaseend","text":"","title":"betoken.timer.timeTillPhaseEnd()"},{"location":"api/timer/#returns","text":"Number : the time left until the end of the current investment phase, in seconds.","title":"Returns"},{"location":"api/timer/#betokentimerphase","text":"","title":"betoken.timer.phase()"},{"location":"api/timer/#returns_1","text":"Number : the id of the current investment phase: - 0 for the Intermission phase - 1 for the Manage phase","title":"Returns"},{"location":"api/timer/#betokentimerphasestarttime","text":"","title":"betoken.timer.phaseStartTime()"},{"location":"api/timer/#returns_2","text":"Number : the Unix timestamp at which the current investment phase began, in seconds.","title":"Returns"},{"location":"api/timer/#betokentimerphaselengths","text":"","title":"betoken.timer.phaseLengths()"},{"location":"api/timer/#returns_3","text":"Array<Number> : the lengths of the investment phases, in seconds, indexed by the phases' ids (see betoken.timer.phase() )","title":"Returns"},{"location":"api/timer/#betokentimercycle","text":"","title":"betoken.timer.cycle()"},{"location":"api/timer/#returns_4","text":"Number : the current cycle number.","title":"Returns"},{"location":"api/tokens/","text":"betoken.tokens Provides info of the tradable assets.","title":"betoken.tokens"},{"location":"api/tokens/#betokentokens","text":"Provides info of the tradable assets.","title":"betoken.tokens"},{"location":"api/user/","text":"betoken.user Provides info of the manager account. betoken.user.address() Returns String : the address of the user's Ethereum account. betoken.user.sharesBalance() Returns BigNumber : the user's Betoken Shares balance. betoken.user.sharesBalanceInDai() Returns BigNumber : the value of the user's Betoken Shares in Dai Stablecoin. betoken.user.kairoBalance() Returns BigNumber : the user's Kairo balance, not including the Kairo used as stake. betoken.user.tokenBalance(tokenSymbol) Arguments tokenSymbol: String : the symbol of the token you want to query. ETH is also supported. Returns BigNumber : the user's balance of the given token. betoken.user.monthlyRoi() Returns BigNumber : the user's ROI for the current investment cycle, in percent. Takes into account the value of the active investments. betoken.user.investmentList() Returns Array<Object> : list of the user's investments in the current investment cycle. The investment objects have the following properties: type: String : type of the investment, one of basic compound and fulcrum . id: Number : ID of the investment. Investments of type basic and fulcrum share an ID system, compound investments has its own. tokenSymbol: String : symbol of the token that the investment invests in. tokenAddress: String : different for each type: basic : address of the token fulcrum : address of the Fulcrum position token compound : address of the Compound cToken stake: BigNumber : amount of Kairo staked into the investment. buyPrice: BigNumber : different for each type: basic : price of the token at time of investment fulcrum : price of the Fulcrum position token at time of investment compound : unavaiable sellPrice: BigNumber : different for each type: basic : price of the token when the investment was sold, or the current price of the token if the investment is active. fulcrum : price of the Fulcrum position token when the investment was sold, or the current price of the Fulcrum position token if the investment is active. compound : unavailable ROI: BigNumber : the ROI of the investment when it was sold, or its current ROI if the investment is active, in percent. kroChange: BigNumber : the change of the Kairo staked in the investment since creation, equals stake * (ROI / 100) currValue: BigNumber : the current value of the Kairo staked in the investment, equals stake + kroChange buyTime: Date : the investment's time of creation. isSold: Boolean : whether or not the investment has been sold. The following properties are exclusive to fulcrum and compound investments: leverage: Number : amount of leverage of the investment, always positive orderType: Boolean : true for short investments, false for long investments safety: Boolean : different for each type: fulcrum : false if the position token's price is within 10% of the liquidation price, true otherwise compound : false if the collateral ratio is within 10% of the liquidation threshold, true otherwise The following properties are exclusive to fulcrum investments: liquidationPrice: BigNumber : the liquidation price of the Fulcrum position token. If the price is less than the liquidation price the position will be liquidated. The following properties are exclusive to compound investments: collateralRatio: BigNumber : the current collateral ratio of the Compound investment. currProfit: BigNumber : the current profit of the Compound investment, in Dai Stablecoin. currCollateral: BigNumber : the current collateral of the Compound investment, in Dai Stablecoin. currBorrow: BigNumber : the current debt of the Compound investment, in Dai Stablecoin. currCash: BigNumber : the current cash held by the Compound investment, in Dai Stablecoin. currLiquidity: BigNumber : the current liquidity of the Compound investment, in Dai Stablecoin. minCollateralRatio: BigNumber : the minimum collateral ratio the Compound investment needs to maintain to avoid liquidation. collateralAmountInDAI: BigNumber : the initial collateral given to the Compound investment at time of creation, in Dai Stablecoin. betoken.user.portfolioValue() Returns BigNumber : the user's Kairo balance, including the current value of the Kairo used as stake. betoken.user.riskTakenPercentage() Returns BigNumber : the risk taken by the manager, expressed in percentage of the Risk Threshold .","title":"betoken.user"},{"location":"api/user/#betokenuser","text":"Provides info of the manager account.","title":"betoken.user"},{"location":"api/user/#betokenuseraddress","text":"","title":"betoken.user.address()"},{"location":"api/user/#returns","text":"String : the address of the user's Ethereum account.","title":"Returns"},{"location":"api/user/#betokenusersharesbalance","text":"","title":"betoken.user.sharesBalance()"},{"location":"api/user/#returns_1","text":"BigNumber : the user's Betoken Shares balance.","title":"Returns"},{"location":"api/user/#betokenusersharesbalanceindai","text":"","title":"betoken.user.sharesBalanceInDai()"},{"location":"api/user/#returns_2","text":"BigNumber : the value of the user's Betoken Shares in Dai Stablecoin.","title":"Returns"},{"location":"api/user/#betokenuserkairobalance","text":"","title":"betoken.user.kairoBalance()"},{"location":"api/user/#returns_3","text":"BigNumber : the user's Kairo balance, not including the Kairo used as stake.","title":"Returns"},{"location":"api/user/#betokenusertokenbalancetokensymbol","text":"","title":"betoken.user.tokenBalance(tokenSymbol)"},{"location":"api/user/#arguments","text":"tokenSymbol: String : the symbol of the token you want to query. ETH is also supported.","title":"Arguments"},{"location":"api/user/#returns_4","text":"BigNumber : the user's balance of the given token.","title":"Returns"},{"location":"api/user/#betokenusermonthlyroi","text":"","title":"betoken.user.monthlyRoi()"},{"location":"api/user/#returns_5","text":"BigNumber : the user's ROI for the current investment cycle, in percent. Takes into account the value of the active investments.","title":"Returns"},{"location":"api/user/#betokenuserinvestmentlist","text":"","title":"betoken.user.investmentList()"},{"location":"api/user/#returns_6","text":"Array<Object> : list of the user's investments in the current investment cycle. The investment objects have the following properties: type: String : type of the investment, one of basic compound and fulcrum . id: Number : ID of the investment. Investments of type basic and fulcrum share an ID system, compound investments has its own. tokenSymbol: String : symbol of the token that the investment invests in. tokenAddress: String : different for each type: basic : address of the token fulcrum : address of the Fulcrum position token compound : address of the Compound cToken stake: BigNumber : amount of Kairo staked into the investment. buyPrice: BigNumber : different for each type: basic : price of the token at time of investment fulcrum : price of the Fulcrum position token at time of investment compound : unavaiable sellPrice: BigNumber : different for each type: basic : price of the token when the investment was sold, or the current price of the token if the investment is active. fulcrum : price of the Fulcrum position token when the investment was sold, or the current price of the Fulcrum position token if the investment is active. compound : unavailable ROI: BigNumber : the ROI of the investment when it was sold, or its current ROI if the investment is active, in percent. kroChange: BigNumber : the change of the Kairo staked in the investment since creation, equals stake * (ROI / 100) currValue: BigNumber : the current value of the Kairo staked in the investment, equals stake + kroChange buyTime: Date : the investment's time of creation. isSold: Boolean : whether or not the investment has been sold. The following properties are exclusive to fulcrum and compound investments: leverage: Number : amount of leverage of the investment, always positive orderType: Boolean : true for short investments, false for long investments safety: Boolean : different for each type: fulcrum : false if the position token's price is within 10% of the liquidation price, true otherwise compound : false if the collateral ratio is within 10% of the liquidation threshold, true otherwise The following properties are exclusive to fulcrum investments: liquidationPrice: BigNumber : the liquidation price of the Fulcrum position token. If the price is less than the liquidation price the position will be liquidated. The following properties are exclusive to compound investments: collateralRatio: BigNumber : the current collateral ratio of the Compound investment. currProfit: BigNumber : the current profit of the Compound investment, in Dai Stablecoin. currCollateral: BigNumber : the current collateral of the Compound investment, in Dai Stablecoin. currBorrow: BigNumber : the current debt of the Compound investment, in Dai Stablecoin. currCash: BigNumber : the current cash held by the Compound investment, in Dai Stablecoin. currLiquidity: BigNumber : the current liquidity of the Compound investment, in Dai Stablecoin. minCollateralRatio: BigNumber : the minimum collateral ratio the Compound investment needs to maintain to avoid liquidation. collateralAmountInDAI: BigNumber : the initial collateral given to the Compound investment at time of creation, in Dai Stablecoin.","title":"Returns"},{"location":"api/user/#betokenuserportfoliovalue","text":"","title":"betoken.user.portfolioValue()"},{"location":"api/user/#returns_7","text":"BigNumber : the user's Kairo balance, including the current value of the Kairo used as stake.","title":"Returns"},{"location":"api/user/#betokenuserrisktakenpercentage","text":"","title":"betoken.user.riskTakenPercentage()"},{"location":"api/user/#returns_8","text":"BigNumber : the risk taken by the manager, expressed in percentage of the Risk Threshold .","title":"Returns"}]}