{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"BetokenJS Javascript API for managing the Betoken fund. Getting Started 1. Install via npm npm install --save betoken-js 2. Import BetokenJS const BetokenAPI = require('betoken-js'); 3. Initialize BetokenJS with your web3 provider & Ethereum private key const web3Provider = 'wss://mainnet.infura.io/ws/v3/...'; const privateKey = '0xdeadbeef'; const betoken = await BetokenAPI(web3Provider, privateKey);","title":"Home"},{"location":"#betokenjs","text":"Javascript API for managing the Betoken fund.","title":"BetokenJS"},{"location":"#getting-started","text":"","title":"Getting Started"},{"location":"#1-install-via-npm","text":"npm install --save betoken-js","title":"1. Install via npm"},{"location":"#2-import-betokenjs","text":"const BetokenAPI = require('betoken-js');","title":"2. Import BetokenJS"},{"location":"#3-initialize-betokenjs-with-your-web3-provider-ethereum-private-key","text":"const web3Provider = 'wss://mainnet.infura.io/ws/v3/...'; const privateKey = '0xdeadbeef'; const betoken = await BetokenAPI(web3Provider, privateKey);","title":"3. Initialize BetokenJS with your web3 provider &amp; Ethereum private key"},{"location":"api/investor-actions/","text":"betoken.investorActions Allows the user to deposit/withdraw their money in the Betoken fund. betoken.investorActions.depositETH(amt, onPending, onConfirm, onError) Allows an investor to deposit into the fund using Ether. Available during investment phase Intermission Arguments amt: BigNumber : the amount of Ether to deposit onPending: (txHash) => : callback for when the transaction hash is available onConfirm: (receipt) => : callback for when the transaction has been accepted into an Ethereum block onError: (error) => : callback for when there's an error Returns Promise : resolves when the transaction has been sent. betoken.investorActions.depositDAI(amt, onPending, onConfirm, onError) Allows an investor to deposit into the fund using Dai Stablecoin. Available during investment phase Intermission Arguments amt: BigNumber : the amount of DAI to deposit onPending: (txHash) => : callback for when the transaction hash is available onConfirm: (receipt) => : callback for when the transaction has been accepted into an Ethereum block onError: (error) => : callback for when there's an error Returns Promise : resolves when the transaction has been sent. betoken.investorActions.depositToken(amt, tokenSymbol, onPending, onConfirm, onError) Allows an investor to deposit into the fund using an ERC20 token supported by Kyber Network, other than Dai Stablecoin. Available during investment phase Intermission Arguments amt: BigNumber : the amount of token to deposit tokenSymbol: String : the symbol of the token used for deposit onPending: (txHash) => : callback for when the transaction hash is available onConfirm: (receipt) => : callback for when the transaction has been accepted into an Ethereum block onError: (error) => : callback for when there's an error Returns Promise : resolves when the transaction has been sent. betoken.investorActions.withdrawETH(amt, onPending, onConfirm, onError) Allows an investor to withdraw their money from the fund in Ether. Available during investment phase Intermission Arguments amt: BigNumber : the amount to withdraw, in Dai Stablecoin onPending: (txHash) => : callback for when the transaction hash is available onConfirm: (receipt) => : callback for when the transaction has been accepted into an Ethereum block onError: (error) => : callback for when there's an error Returns Promise : resolves when the transaction has been sent. betoken.investorActions.withdrawDAI(amt, onPending, onConfirm, onError) Allows an investor to withdraw their money from the fund in Dai Stablecoin. Available during investment phase Intermission Arguments amt: BigNumber : the amount to withdraw, in Dai Stablecoin onPending: (txHash) => : callback for when the transaction hash is available onConfirm: (receipt) => : callback for when the transaction has been accepted into an Ethereum block onError: (error) => : callback for when there's an error Returns Promise : resolves when the transaction has been sent. betoken.investorActions.withdrawToken(amt, tokenSymbol, onPending, onConfirm, onError) Allows an investor to withdraw their money from the fund in an ERC20 token supported by Kyber Network, other than Dai Stablecoin. Available during investment phase Intermission Arguments amt: BigNumber : the amount to withdraw, in Dai Stablecoin tokenSymbol: String : the symbol of the token to used for the withdrawal onPending: (txHash) => : callback for when the transaction hash is available onConfirm: (receipt) => : callback for when the transaction has been accepted into an Ethereum block onError: (error) => : callback for when there's an error Returns Promise : resolves when the transaction has been sent.","title":"betoken.investorActions"},{"location":"api/investor-actions/#betokeninvestoractions","text":"Allows the user to deposit/withdraw their money in the Betoken fund.","title":"betoken.investorActions"},{"location":"api/investor-actions/#betokeninvestoractionsdepositethamt-onpending-onconfirm-onerror","text":"Allows an investor to deposit into the fund using Ether.","title":"betoken.investorActions.depositETH(amt, onPending, onConfirm, onError)"},{"location":"api/investor-actions/#available-during-investment-phase","text":"Intermission","title":"Available during investment phase"},{"location":"api/investor-actions/#arguments","text":"amt: BigNumber : the amount of Ether to deposit onPending: (txHash) => : callback for when the transaction hash is available onConfirm: (receipt) => : callback for when the transaction has been accepted into an Ethereum block onError: (error) => : callback for when there's an error","title":"Arguments"},{"location":"api/investor-actions/#returns","text":"Promise : resolves when the transaction has been sent.","title":"Returns"},{"location":"api/investor-actions/#betokeninvestoractionsdepositdaiamt-onpending-onconfirm-onerror","text":"Allows an investor to deposit into the fund using Dai Stablecoin.","title":"betoken.investorActions.depositDAI(amt, onPending, onConfirm, onError)"},{"location":"api/investor-actions/#available-during-investment-phase_1","text":"Intermission","title":"Available during investment phase"},{"location":"api/investor-actions/#arguments_1","text":"amt: BigNumber : the amount of DAI to deposit onPending: (txHash) => : callback for when the transaction hash is available onConfirm: (receipt) => : callback for when the transaction has been accepted into an Ethereum block onError: (error) => : callback for when there's an error","title":"Arguments"},{"location":"api/investor-actions/#returns_1","text":"Promise : resolves when the transaction has been sent.","title":"Returns"},{"location":"api/investor-actions/#betokeninvestoractionsdeposittokenamt-tokensymbol-onpending-onconfirm-onerror","text":"Allows an investor to deposit into the fund using an ERC20 token supported by Kyber Network, other than Dai Stablecoin.","title":"betoken.investorActions.depositToken(amt, tokenSymbol, onPending, onConfirm, onError)"},{"location":"api/investor-actions/#available-during-investment-phase_2","text":"Intermission","title":"Available during investment phase"},{"location":"api/investor-actions/#arguments_2","text":"amt: BigNumber : the amount of token to deposit tokenSymbol: String : the symbol of the token used for deposit onPending: (txHash) => : callback for when the transaction hash is available onConfirm: (receipt) => : callback for when the transaction has been accepted into an Ethereum block onError: (error) => : callback for when there's an error","title":"Arguments"},{"location":"api/investor-actions/#returns_2","text":"Promise : resolves when the transaction has been sent.","title":"Returns"},{"location":"api/investor-actions/#betokeninvestoractionswithdrawethamt-onpending-onconfirm-onerror","text":"Allows an investor to withdraw their money from the fund in Ether.","title":"betoken.investorActions.withdrawETH(amt, onPending, onConfirm, onError)"},{"location":"api/investor-actions/#available-during-investment-phase_3","text":"Intermission","title":"Available during investment phase"},{"location":"api/investor-actions/#arguments_3","text":"amt: BigNumber : the amount to withdraw, in Dai Stablecoin onPending: (txHash) => : callback for when the transaction hash is available onConfirm: (receipt) => : callback for when the transaction has been accepted into an Ethereum block onError: (error) => : callback for when there's an error","title":"Arguments"},{"location":"api/investor-actions/#returns_3","text":"Promise : resolves when the transaction has been sent.","title":"Returns"},{"location":"api/investor-actions/#betokeninvestoractionswithdrawdaiamt-onpending-onconfirm-onerror","text":"Allows an investor to withdraw their money from the fund in Dai Stablecoin.","title":"betoken.investorActions.withdrawDAI(amt, onPending, onConfirm, onError)"},{"location":"api/investor-actions/#available-during-investment-phase_4","text":"Intermission","title":"Available during investment phase"},{"location":"api/investor-actions/#arguments_4","text":"amt: BigNumber : the amount to withdraw, in Dai Stablecoin onPending: (txHash) => : callback for when the transaction hash is available onConfirm: (receipt) => : callback for when the transaction has been accepted into an Ethereum block onError: (error) => : callback for when there's an error","title":"Arguments"},{"location":"api/investor-actions/#returns_4","text":"Promise : resolves when the transaction has been sent.","title":"Returns"},{"location":"api/investor-actions/#betokeninvestoractionswithdrawtokenamt-tokensymbol-onpending-onconfirm-onerror","text":"Allows an investor to withdraw their money from the fund in an ERC20 token supported by Kyber Network, other than Dai Stablecoin.","title":"betoken.investorActions.withdrawToken(amt, tokenSymbol, onPending, onConfirm, onError)"},{"location":"api/investor-actions/#available-during-investment-phase_5","text":"Intermission","title":"Available during investment phase"},{"location":"api/investor-actions/#arguments_5","text":"amt: BigNumber : the amount to withdraw, in Dai Stablecoin tokenSymbol: String : the symbol of the token to used for the withdrawal onPending: (txHash) => : callback for when the transaction hash is available onConfirm: (receipt) => : callback for when the transaction has been accepted into an Ethereum block onError: (error) => : callback for when there's an error","title":"Arguments"},{"location":"api/investor-actions/#returns_5","text":"Promise : resolves when the transaction has been sent.","title":"Returns"},{"location":"api/manager-actions/","text":"betoken.managerActions Allows the user to create investments and margin orders, sell them, and maintain the collateration of margin orders. betoken.managerActions.newInvestmentWithSymbol(tokenSymbol, stakeInKRO, minPrice, maxPrice, onPending, onConfirm, onError) Creates a new investment into an asset specified by its symbol. Available during investment phase Manage Arguments tokenSymbol: String : the asset's symbol stakeInKRO: BigNumber : the amount of Kairo to stake into the investment minPrice: BigNumber : the minimum acceptable price for the asset maxPrice: BigNumber : the maximum acceptable price for the asset onPending: (txHash) => : callback for when the transaction hash is available onConfirm: (receipt) => : callback for when the transaction has been accepted into an Ethereum block onError: (error) => : callback for when there's an error Returns Promise : resolves when the transaction has been sent. betoken.managerActions.newInvestmentWithSymbol(tokenAddress, stakeInKRO, minPrice, maxPrice, onPending, onConfirm, onError) Creates a new investment into an asset/Fulcrum pToken specified by its address. Available during investment phase Manage Arguments tokenAddress: String : the asset/pToken's address stakeInKRO: BigNumber : the amount of Kairo to stake into the investment minPrice: BigNumber : the minimum acceptable price for the asset/pToken maxPrice: BigNumber : the maximum acceptable price for the asset/pToken onPending: (txHash) => : callback for when the transaction hash is available onConfirm: (receipt) => : callback for when the transaction has been accepted into an Ethereum block onError: (error) => : callback for when there's an error Returns Promise : resolves when the transaction has been sent. betoken.managerActions.sellInvestment(id, sellProportion, minPrice, maxPrice, onPending, onConfirm, onError) Sells a basic/Fulcrum investment. Available during investment phase Manage Arguments id: Number : the ID of the investment sellProportion: Number : the proportion of the investment to sell, between 0 and 1 minPrice: BigNumber : the minimum acceptable price for the asset/pToken maxPrice: BigNumber : the maximum acceptable price for the asset/pToken onPending: (txHash) => : callback for when the transaction hash is available onConfirm: (receipt) => : callback for when the transaction has been accepted into an Ethereum block onError: (error) => : callback for when there's an error Returns Promise : resolves when the transaction has been sent. betoken.managerActions.newCompoundOrder(orderType, tokenSymbol, stakeInKRO, minPrice, maxPrice, onPending, onConfirm, onError) Creates a Compound margin order of the given asset. Available during investment phase Manage Arguments orderType: Boolean : true for shorting, false for longing tokenSymbol: String : the asset's symbol stakeInKRO: BigNumber : the amount of Kairo to stake into the investment minPrice: BigNumber : the minimum acceptable price for the asset maxPrice: BigNumber : the maximum acceptable price for the asset onPending: (txHash) => : callback for when the transaction hash is available onConfirm: (receipt) => : callback for when the transaction has been accepted into an Ethereum block onError: (error) => : callback for when there's an error Returns Promise : resolves when the transaction has been sent. betoken.managerActions.sellCompoundOrder(id, minPrice, maxPrice, onPending, onConfirm, onError) Sells a Compound margin order. Available during investment phase Manage Arguments id: Number : the ID of the Compound order to sell minPrice: BigNumber : the minimum acceptable price for the asset maxPrice: BigNumber : the maximum acceptable price for the asset onPending: (txHash) => : callback for when the transaction hash is available onConfirm: (receipt) => : callback for when the transaction has been accepted into an Ethereum block onError: (error) => : callback for when there's an error Returns Promise : resolves when the transaction has been sent. betoken.managerActions.repayCompoundOrder(id, amountInDAI, onPending, onConfirm, onError) Repays the debt of a Compound margin order using its cash. Available during investment phase Manage Arguments id: Number : the ID of the Compound order to repay amountInDAI: BigNumber : the amount of debt to repay, in DAI onPending: (txHash) => : callback for when the transaction hash is available onConfirm: (receipt) => : callback for when the transaction has been accepted into an Ethereum block onError: (error) => : callback for when there's an error Returns Promise : resolves when the transaction has been sent. betoken.managerActions.redeemCommission(inShares, onPending, onConfirm, onError) Redeems the total commission balance for the manager. Available during investment phase Intermission Arguments inShares: Boolean : true to redeem commission in Betoken Shares, false to redeem in DAI onPending: (txHash) => : callback for when the transaction hash is available onConfirm: (receipt) => : callback for when the transaction has been accepted into an Ethereum block onError: (error) => : callback for when there's an error Returns Promise : resolves when the transaction has been sent. betoken.managerActions.redeemCommissionForCycle(inShares, cycle, stakeInKRO, minPrice, maxPrice, onPending, onConfirm, onError) Redeems the commission of a particular cycle for the manager. Only use if redeemCommission() fails. Available during investment phase Intermission Arguments inShares: Boolean : true to redeem commission in Betoken Shares, false to redeem in DAI cycle: Number : the investment cycle onPending: (txHash) => : callback for when the transaction hash is available onConfirm: (receipt) => : callback for when the transaction has been accepted into an Ethereum block onError: (error) => : callback for when there's an error Returns Promise : resolves when the transaction has been sent. betoken.managerActions.nextPhase(onPending, onConfirm, onError) Transitions the Betoken fund to the next investment phase when the current phase is over. This affects all Betoken users, and the manager that calls this function first is rewarded 1 KRO. Available during investment phase All Arguments onPending: (txHash) => : callback for when the transaction hash is available onConfirm: (receipt) => : callback for when the transaction has been accepted into an Ethereum block onError: (error) => : callback for when there's an error Returns Promise : resolves when the transaction has been sent. betoken.managerActions.registerWithDAI(amountInDAI, onPending, onConfirm, onError) Registers the user as a Betoken fund manager, using DAI to pay for the cost. Can only be called once per user. Available during investment phase All Arguments amountInDAI: BigNumber : the amount to pay, in DAI onPending: (txHash) => : callback for when the transaction hash is available onConfirm: (receipt) => : callback for when the transaction has been accepted into an Ethereum block onError: (error) => : callback for when there's an error Returns Promise : resolves when the transaction has been sent. betoken.managerActions.registerWithETH(amountInETH, onPending, onConfirm, onError) Registers the user as a Betoken fund manager, using Ether to pay for the cost. Can only be called once per user. Available during investment phase All Arguments amountInETH: BigNumber : the amount to pay, in Ether onPending: (txHash) => : callback for when the transaction hash is available onConfirm: (receipt) => : callback for when the transaction has been accepted into an Ethereum block onError: (error) => : callback for when there's an error Returns Promise : resolves when the transaction has been sent. betoken.managerActions.registerWithToken(amountInToken, tokenSymbol, onPending, onConfirm, onError) Registers the user as a Betoken fund manager, using an ERC20 token supported by Kyber Network to pay for the cost. Can only be called once per user. Available during investment phase All Arguments amountInToken: BigNumber : the amount to pay, in the specified token tokenSymbol: String : the symbol of the token used for payment onPending: (txHash) => : callback for when the transaction hash is available onConfirm: (receipt) => : callback for when the transaction has been accepted into an Ethereum block onError: (error) => : callback for when there's an error Returns Promise : resolves when the transaction has been sent.","title":"betoken.managerActions"},{"location":"api/manager-actions/#betokenmanageractions","text":"Allows the user to create investments and margin orders, sell them, and maintain the collateration of margin orders.","title":"betoken.managerActions"},{"location":"api/manager-actions/#betokenmanageractionsnewinvestmentwithsymboltokensymbol-stakeinkro-minprice-maxprice-onpending-onconfirm-onerror","text":"Creates a new investment into an asset specified by its symbol.","title":"betoken.managerActions.newInvestmentWithSymbol(tokenSymbol, stakeInKRO, minPrice, maxPrice, onPending, onConfirm, onError)"},{"location":"api/manager-actions/#available-during-investment-phase","text":"Manage","title":"Available during investment phase"},{"location":"api/manager-actions/#arguments","text":"tokenSymbol: String : the asset's symbol stakeInKRO: BigNumber : the amount of Kairo to stake into the investment minPrice: BigNumber : the minimum acceptable price for the asset maxPrice: BigNumber : the maximum acceptable price for the asset onPending: (txHash) => : callback for when the transaction hash is available onConfirm: (receipt) => : callback for when the transaction has been accepted into an Ethereum block onError: (error) => : callback for when there's an error","title":"Arguments"},{"location":"api/manager-actions/#returns","text":"Promise : resolves when the transaction has been sent.","title":"Returns"},{"location":"api/manager-actions/#betokenmanageractionsnewinvestmentwithsymboltokenaddress-stakeinkro-minprice-maxprice-onpending-onconfirm-onerror","text":"Creates a new investment into an asset/Fulcrum pToken specified by its address.","title":"betoken.managerActions.newInvestmentWithSymbol(tokenAddress, stakeInKRO, minPrice, maxPrice, onPending, onConfirm, onError)"},{"location":"api/manager-actions/#available-during-investment-phase_1","text":"Manage","title":"Available during investment phase"},{"location":"api/manager-actions/#arguments_1","text":"tokenAddress: String : the asset/pToken's address stakeInKRO: BigNumber : the amount of Kairo to stake into the investment minPrice: BigNumber : the minimum acceptable price for the asset/pToken maxPrice: BigNumber : the maximum acceptable price for the asset/pToken onPending: (txHash) => : callback for when the transaction hash is available onConfirm: (receipt) => : callback for when the transaction has been accepted into an Ethereum block onError: (error) => : callback for when there's an error","title":"Arguments"},{"location":"api/manager-actions/#returns_1","text":"Promise : resolves when the transaction has been sent.","title":"Returns"},{"location":"api/manager-actions/#betokenmanageractionssellinvestmentid-sellproportion-minprice-maxprice-onpending-onconfirm-onerror","text":"Sells a basic/Fulcrum investment.","title":"betoken.managerActions.sellInvestment(id, sellProportion, minPrice, maxPrice, onPending, onConfirm, onError)"},{"location":"api/manager-actions/#available-during-investment-phase_2","text":"Manage","title":"Available during investment phase"},{"location":"api/manager-actions/#arguments_2","text":"id: Number : the ID of the investment sellProportion: Number : the proportion of the investment to sell, between 0 and 1 minPrice: BigNumber : the minimum acceptable price for the asset/pToken maxPrice: BigNumber : the maximum acceptable price for the asset/pToken onPending: (txHash) => : callback for when the transaction hash is available onConfirm: (receipt) => : callback for when the transaction has been accepted into an Ethereum block onError: (error) => : callback for when there's an error","title":"Arguments"},{"location":"api/manager-actions/#returns_2","text":"Promise : resolves when the transaction has been sent.","title":"Returns"},{"location":"api/manager-actions/#betokenmanageractionsnewcompoundorderordertype-tokensymbol-stakeinkro-minprice-maxprice-onpending-onconfirm-onerror","text":"Creates a Compound margin order of the given asset.","title":"betoken.managerActions.newCompoundOrder(orderType, tokenSymbol, stakeInKRO, minPrice, maxPrice, onPending, onConfirm, onError)"},{"location":"api/manager-actions/#available-during-investment-phase_3","text":"Manage","title":"Available during investment phase"},{"location":"api/manager-actions/#arguments_3","text":"orderType: Boolean : true for shorting, false for longing tokenSymbol: String : the asset's symbol stakeInKRO: BigNumber : the amount of Kairo to stake into the investment minPrice: BigNumber : the minimum acceptable price for the asset maxPrice: BigNumber : the maximum acceptable price for the asset onPending: (txHash) => : callback for when the transaction hash is available onConfirm: (receipt) => : callback for when the transaction has been accepted into an Ethereum block onError: (error) => : callback for when there's an error","title":"Arguments"},{"location":"api/manager-actions/#returns_3","text":"Promise : resolves when the transaction has been sent.","title":"Returns"},{"location":"api/manager-actions/#betokenmanageractionssellcompoundorderid-minprice-maxprice-onpending-onconfirm-onerror","text":"Sells a Compound margin order.","title":"betoken.managerActions.sellCompoundOrder(id, minPrice, maxPrice, onPending, onConfirm, onError)"},{"location":"api/manager-actions/#available-during-investment-phase_4","text":"Manage","title":"Available during investment phase"},{"location":"api/manager-actions/#arguments_4","text":"id: Number : the ID of the Compound order to sell minPrice: BigNumber : the minimum acceptable price for the asset maxPrice: BigNumber : the maximum acceptable price for the asset onPending: (txHash) => : callback for when the transaction hash is available onConfirm: (receipt) => : callback for when the transaction has been accepted into an Ethereum block onError: (error) => : callback for when there's an error","title":"Arguments"},{"location":"api/manager-actions/#returns_4","text":"Promise : resolves when the transaction has been sent.","title":"Returns"},{"location":"api/manager-actions/#betokenmanageractionsrepaycompoundorderid-amountindai-onpending-onconfirm-onerror","text":"Repays the debt of a Compound margin order using its cash.","title":"betoken.managerActions.repayCompoundOrder(id, amountInDAI, onPending, onConfirm, onError)"},{"location":"api/manager-actions/#available-during-investment-phase_5","text":"Manage","title":"Available during investment phase"},{"location":"api/manager-actions/#arguments_5","text":"id: Number : the ID of the Compound order to repay amountInDAI: BigNumber : the amount of debt to repay, in DAI onPending: (txHash) => : callback for when the transaction hash is available onConfirm: (receipt) => : callback for when the transaction has been accepted into an Ethereum block onError: (error) => : callback for when there's an error","title":"Arguments"},{"location":"api/manager-actions/#returns_5","text":"Promise : resolves when the transaction has been sent.","title":"Returns"},{"location":"api/manager-actions/#betokenmanageractionsredeemcommissioninshares-onpending-onconfirm-onerror","text":"Redeems the total commission balance for the manager.","title":"betoken.managerActions.redeemCommission(inShares, onPending, onConfirm, onError)"},{"location":"api/manager-actions/#available-during-investment-phase_6","text":"Intermission","title":"Available during investment phase"},{"location":"api/manager-actions/#arguments_6","text":"inShares: Boolean : true to redeem commission in Betoken Shares, false to redeem in DAI onPending: (txHash) => : callback for when the transaction hash is available onConfirm: (receipt) => : callback for when the transaction has been accepted into an Ethereum block onError: (error) => : callback for when there's an error","title":"Arguments"},{"location":"api/manager-actions/#returns_6","text":"Promise : resolves when the transaction has been sent.","title":"Returns"},{"location":"api/manager-actions/#betokenmanageractionsredeemcommissionforcycleinshares-cycle-stakeinkro-minprice-maxprice-onpending-onconfirm-onerror","text":"Redeems the commission of a particular cycle for the manager. Only use if redeemCommission() fails.","title":"betoken.managerActions.redeemCommissionForCycle(inShares, cycle, stakeInKRO, minPrice, maxPrice, onPending, onConfirm, onError)"},{"location":"api/manager-actions/#available-during-investment-phase_7","text":"Intermission","title":"Available during investment phase"},{"location":"api/manager-actions/#arguments_7","text":"inShares: Boolean : true to redeem commission in Betoken Shares, false to redeem in DAI cycle: Number : the investment cycle onPending: (txHash) => : callback for when the transaction hash is available onConfirm: (receipt) => : callback for when the transaction has been accepted into an Ethereum block onError: (error) => : callback for when there's an error","title":"Arguments"},{"location":"api/manager-actions/#returns_7","text":"Promise : resolves when the transaction has been sent.","title":"Returns"},{"location":"api/manager-actions/#betokenmanageractionsnextphaseonpending-onconfirm-onerror","text":"Transitions the Betoken fund to the next investment phase when the current phase is over. This affects all Betoken users, and the manager that calls this function first is rewarded 1 KRO.","title":"betoken.managerActions.nextPhase(onPending, onConfirm, onError)"},{"location":"api/manager-actions/#available-during-investment-phase_8","text":"All","title":"Available during investment phase"},{"location":"api/manager-actions/#arguments_8","text":"onPending: (txHash) => : callback for when the transaction hash is available onConfirm: (receipt) => : callback for when the transaction has been accepted into an Ethereum block onError: (error) => : callback for when there's an error","title":"Arguments"},{"location":"api/manager-actions/#returns_8","text":"Promise : resolves when the transaction has been sent.","title":"Returns"},{"location":"api/manager-actions/#betokenmanageractionsregisterwithdaiamountindai-onpending-onconfirm-onerror","text":"Registers the user as a Betoken fund manager, using DAI to pay for the cost. Can only be called once per user.","title":"betoken.managerActions.registerWithDAI(amountInDAI, onPending, onConfirm, onError)"},{"location":"api/manager-actions/#available-during-investment-phase_9","text":"All","title":"Available during investment phase"},{"location":"api/manager-actions/#arguments_9","text":"amountInDAI: BigNumber : the amount to pay, in DAI onPending: (txHash) => : callback for when the transaction hash is available onConfirm: (receipt) => : callback for when the transaction has been accepted into an Ethereum block onError: (error) => : callback for when there's an error","title":"Arguments"},{"location":"api/manager-actions/#returns_9","text":"Promise : resolves when the transaction has been sent.","title":"Returns"},{"location":"api/manager-actions/#betokenmanageractionsregisterwithethamountineth-onpending-onconfirm-onerror","text":"Registers the user as a Betoken fund manager, using Ether to pay for the cost. Can only be called once per user.","title":"betoken.managerActions.registerWithETH(amountInETH, onPending, onConfirm, onError)"},{"location":"api/manager-actions/#available-during-investment-phase_10","text":"All","title":"Available during investment phase"},{"location":"api/manager-actions/#arguments_10","text":"amountInETH: BigNumber : the amount to pay, in Ether onPending: (txHash) => : callback for when the transaction hash is available onConfirm: (receipt) => : callback for when the transaction has been accepted into an Ethereum block onError: (error) => : callback for when there's an error","title":"Arguments"},{"location":"api/manager-actions/#returns_10","text":"Promise : resolves when the transaction has been sent.","title":"Returns"},{"location":"api/manager-actions/#betokenmanageractionsregisterwithtokenamountintoken-tokensymbol-onpending-onconfirm-onerror","text":"Registers the user as a Betoken fund manager, using an ERC20 token supported by Kyber Network to pay for the cost. Can only be called once per user.","title":"betoken.managerActions.registerWithToken(amountInToken, tokenSymbol, onPending, onConfirm, onError)"},{"location":"api/manager-actions/#available-during-investment-phase_11","text":"All","title":"Available during investment phase"},{"location":"api/manager-actions/#arguments_11","text":"amountInToken: BigNumber : the amount to pay, in the specified token tokenSymbol: String : the symbol of the token used for payment onPending: (txHash) => : callback for when the transaction hash is available onConfirm: (receipt) => : callback for when the transaction has been accepted into an Ethereum block onError: (error) => : callback for when there's an error","title":"Arguments"},{"location":"api/manager-actions/#returns_11","text":"Promise : resolves when the transaction has been sent.","title":"Returns"},{"location":"api/refresh/","text":"betoken.refreshActions Allows the user to refresh the data. betoken.refreshActions.investments() Refreshes betoken.user.investmentList() . Returns Promise : resolves when the refresh is finished. betoken.refreshActions.prices() Refreshes the token prices in betoken.tokens.tokenData() . Returns Promise : resolves when the refresh is finished. betoken.refreshActions.investments() Refreshes all data. Returns Promise : resolves when the refresh is finished.","title":"betoken.refreshActions"},{"location":"api/refresh/#betokenrefreshactions","text":"Allows the user to refresh the data.","title":"betoken.refreshActions"},{"location":"api/refresh/#betokenrefreshactionsinvestments","text":"Refreshes betoken.user.investmentList() .","title":"betoken.refreshActions.investments()"},{"location":"api/refresh/#returns","text":"Promise : resolves when the refresh is finished.","title":"Returns"},{"location":"api/refresh/#betokenrefreshactionsprices","text":"Refreshes the token prices in betoken.tokens.tokenData() .","title":"betoken.refreshActions.prices()"},{"location":"api/refresh/#returns_1","text":"Promise : resolves when the refresh is finished.","title":"Returns"},{"location":"api/refresh/#betokenrefreshactionsinvestments_1","text":"Refreshes all data.","title":"betoken.refreshActions.investments()"},{"location":"api/refresh/#returns_2","text":"Promise : resolves when the refresh is finished.","title":"Returns"},{"location":"api/stats/","text":"betoken.stats Provides statistics of the Betoken fund. betoken.stats.cycleLength() Returns BigNumber : length of one investment cycle, in days. betoken.stats.totalFunds() Returns BigNumber : the total funds owned by the Betoken fund, excluding the profits/losses of currently active investments. betoken.stats.sharesPrice() Returns BigNumber : price of Betoken Shares, in Dai Stablecoin. betoken.stats.kairoPrice() Returns BigNumber : price of buying Kairo, in Dai Stablecoin. betoken.stats.kairoTotalSupply() Returns BigNumber : total supply of Kairo. betoken.stats.sharesTotalSupply() Returns BigNumber : total supply of Betoken Shares.","title":"betoken.stats"},{"location":"api/stats/#betokenstats","text":"Provides statistics of the Betoken fund.","title":"betoken.stats"},{"location":"api/stats/#betokenstatscyclelength","text":"","title":"betoken.stats.cycleLength()"},{"location":"api/stats/#returns","text":"BigNumber : length of one investment cycle, in days.","title":"Returns"},{"location":"api/stats/#betokenstatstotalfunds","text":"","title":"betoken.stats.totalFunds()"},{"location":"api/stats/#returns_1","text":"BigNumber : the total funds owned by the Betoken fund, excluding the profits/losses of currently active investments.","title":"Returns"},{"location":"api/stats/#betokenstatssharesprice","text":"","title":"betoken.stats.sharesPrice()"},{"location":"api/stats/#returns_2","text":"BigNumber : price of Betoken Shares, in Dai Stablecoin.","title":"Returns"},{"location":"api/stats/#betokenstatskairoprice","text":"","title":"betoken.stats.kairoPrice()"},{"location":"api/stats/#returns_3","text":"BigNumber : price of buying Kairo, in Dai Stablecoin.","title":"Returns"},{"location":"api/stats/#betokenstatskairototalsupply","text":"","title":"betoken.stats.kairoTotalSupply()"},{"location":"api/stats/#returns_4","text":"BigNumber : total supply of Kairo.","title":"Returns"},{"location":"api/stats/#betokenstatssharestotalsupply","text":"","title":"betoken.stats.sharesTotalSupply()"},{"location":"api/stats/#returns_5","text":"BigNumber : total supply of Betoken Shares.","title":"Returns"},{"location":"api/timer/","text":"betoken.timer Provides info regarding Betoken's investment cycle. betoken.timer.timeTillPhaseEnd() Returns Number : the time left until the end of the current investment phase, in seconds. betoken.timer.phase() Returns Number : the id of the current investment phase: - 0 for the Intermission phase - 1 for the Manage phase betoken.timer.phaseStartTime() Returns Number : the Unix timestamp at which the current investment phase began, in seconds. betoken.timer.phaseLengths() Returns Array<Number> : the lengths of the investment phases, in seconds, indexed by the phases' ids (see betoken.timer.phase() ) betoken.timer.cycle() Returns Number : the current cycle number.","title":"betoken.timer"},{"location":"api/timer/#betokentimer","text":"Provides info regarding Betoken's investment cycle.","title":"betoken.timer"},{"location":"api/timer/#betokentimertimetillphaseend","text":"","title":"betoken.timer.timeTillPhaseEnd()"},{"location":"api/timer/#returns","text":"Number : the time left until the end of the current investment phase, in seconds.","title":"Returns"},{"location":"api/timer/#betokentimerphase","text":"","title":"betoken.timer.phase()"},{"location":"api/timer/#returns_1","text":"Number : the id of the current investment phase: - 0 for the Intermission phase - 1 for the Manage phase","title":"Returns"},{"location":"api/timer/#betokentimerphasestarttime","text":"","title":"betoken.timer.phaseStartTime()"},{"location":"api/timer/#returns_2","text":"Number : the Unix timestamp at which the current investment phase began, in seconds.","title":"Returns"},{"location":"api/timer/#betokentimerphaselengths","text":"","title":"betoken.timer.phaseLengths()"},{"location":"api/timer/#returns_3","text":"Array<Number> : the lengths of the investment phases, in seconds, indexed by the phases' ids (see betoken.timer.phase() )","title":"Returns"},{"location":"api/timer/#betokentimercycle","text":"","title":"betoken.timer.cycle()"},{"location":"api/timer/#returns_4","text":"Number : the current cycle number.","title":"Returns"},{"location":"api/tokens/","text":"betoken.tokens Provides info of the tradable assets. betoken.tokens.tokenData() Returns Array<Object> : list of information about supported assets. Each object has the following properties: name: String : the name of the asset symbol: String : the symbol of the asset address: String : the address of the asset (0xeeeeee... for Ether) decimals: Number : the number of decimals used by the asset price: BigNumber : the current price of the asset, in Dai Stablecoin dailyPriceChange: BigNumber : the 24 hour change of the asset's price in Dai, in percent betoken.tokens.assetSymbolToInfo(symbol) Arguments symbol: String : the symbol of the asset you're querying. Returns Object : information about the asset. The properties are listed in betoken.tokens.tokenData() betoken.tokens.assetSymbolToPTokens(symbol) Arguments symbol: String : the symbol of the asset you're querying. Returns Array<Object> : list of Fulcrum pTokens of the asset. Each object has the following properties: address: String : address of the pToken leverage: Number : leverage of the pToken type: Boolean : true if it's a short pToken, false if it's a long pToken betoken.tokens.assetSymbolToCTokenAddress(symbol) Arguments symbol: String : the symbol of the asset you're querying. Returns String : the asset's corresponding Compound cToken's address. betoken.tokens.assetAddressToSymbol(addr) Arguments addr: String : the address of the asset you're querying. Returns String : the symbol of the asset betoken.tokens.assetPTokenAddressToInfo(addr) Arguments addr: String : the address of the Fulcrum pToken you're querying. Returns Object : information about the pToken. The properties are listed in betoken.tokens.assetSymbolToPTokens(symbol) betoken.tokens.assetCTokenAddressToSymbol(addr) Arguments addr: String : the address of the Compound cToken you're querying. Returns String : the symbol of the cToken's underlying asset. betoken.tokens.getPTokenPrice(addr, underlyingPrice) Arguments addr: String : the address of the Fulcrum pToken you're querying. underlyingPrice: BigNumber : the current price of the pToken's underlying asset, in Dai Stablecoin. Returns BigNumber : the current price of the pToken, in Dai Stablecoin. betoken.tokens.notStablecoin(symbol) Arguments symbol: String : the symbol of the asset you're querying. Returns Boolean : true if the asset is not a stablecoin (or something you won't want to invest in, such as WETH), false otherwise. betoken.tokens.isCompoundToken(symbol) Arguments symbol: String : the symbol of the asset you're querying. Returns Boolean : true if the asset supports Compound investments, false otherwise. betoken.tokens.isFulcrumToken(symbol) Arguments symbol: String : the symbol of the asset you're querying. Returns Boolean : true if the asset supports Fulcrum investments, false otherwise. betoken.tokens.fulcrumMinStake(symbol, isShort) Arguments symbol: String : the symbol of the asset you're querying. isShort: Boolean : true for shorting, false for longing. Returns BigNumber : the minimum Kairo needed to stake in a Fulcrum investment with the given parameters.","title":"betoken.tokens"},{"location":"api/tokens/#betokentokens","text":"Provides info of the tradable assets.","title":"betoken.tokens"},{"location":"api/tokens/#betokentokenstokendata","text":"","title":"betoken.tokens.tokenData()"},{"location":"api/tokens/#returns","text":"Array<Object> : list of information about supported assets. Each object has the following properties: name: String : the name of the asset symbol: String : the symbol of the asset address: String : the address of the asset (0xeeeeee... for Ether) decimals: Number : the number of decimals used by the asset price: BigNumber : the current price of the asset, in Dai Stablecoin dailyPriceChange: BigNumber : the 24 hour change of the asset's price in Dai, in percent","title":"Returns"},{"location":"api/tokens/#betokentokensassetsymboltoinfosymbol","text":"","title":"betoken.tokens.assetSymbolToInfo(symbol)"},{"location":"api/tokens/#arguments","text":"symbol: String : the symbol of the asset you're querying.","title":"Arguments"},{"location":"api/tokens/#returns_1","text":"Object : information about the asset. The properties are listed in betoken.tokens.tokenData()","title":"Returns"},{"location":"api/tokens/#betokentokensassetsymboltoptokenssymbol","text":"","title":"betoken.tokens.assetSymbolToPTokens(symbol)"},{"location":"api/tokens/#arguments_1","text":"symbol: String : the symbol of the asset you're querying.","title":"Arguments"},{"location":"api/tokens/#returns_2","text":"Array<Object> : list of Fulcrum pTokens of the asset. Each object has the following properties: address: String : address of the pToken leverage: Number : leverage of the pToken type: Boolean : true if it's a short pToken, false if it's a long pToken","title":"Returns"},{"location":"api/tokens/#betokentokensassetsymboltoctokenaddresssymbol","text":"","title":"betoken.tokens.assetSymbolToCTokenAddress(symbol)"},{"location":"api/tokens/#arguments_2","text":"symbol: String : the symbol of the asset you're querying.","title":"Arguments"},{"location":"api/tokens/#returns_3","text":"String : the asset's corresponding Compound cToken's address.","title":"Returns"},{"location":"api/tokens/#betokentokensassetaddresstosymboladdr","text":"","title":"betoken.tokens.assetAddressToSymbol(addr)"},{"location":"api/tokens/#arguments_3","text":"addr: String : the address of the asset you're querying.","title":"Arguments"},{"location":"api/tokens/#returns_4","text":"String : the symbol of the asset","title":"Returns"},{"location":"api/tokens/#betokentokensassetptokenaddresstoinfoaddr","text":"","title":"betoken.tokens.assetPTokenAddressToInfo(addr)"},{"location":"api/tokens/#arguments_4","text":"addr: String : the address of the Fulcrum pToken you're querying.","title":"Arguments"},{"location":"api/tokens/#returns_5","text":"Object : information about the pToken. The properties are listed in betoken.tokens.assetSymbolToPTokens(symbol)","title":"Returns"},{"location":"api/tokens/#betokentokensassetctokenaddresstosymboladdr","text":"","title":"betoken.tokens.assetCTokenAddressToSymbol(addr)"},{"location":"api/tokens/#arguments_5","text":"addr: String : the address of the Compound cToken you're querying.","title":"Arguments"},{"location":"api/tokens/#returns_6","text":"String : the symbol of the cToken's underlying asset.","title":"Returns"},{"location":"api/tokens/#betokentokensgetptokenpriceaddr-underlyingprice","text":"","title":"betoken.tokens.getPTokenPrice(addr, underlyingPrice)"},{"location":"api/tokens/#arguments_6","text":"addr: String : the address of the Fulcrum pToken you're querying. underlyingPrice: BigNumber : the current price of the pToken's underlying asset, in Dai Stablecoin.","title":"Arguments"},{"location":"api/tokens/#returns_7","text":"BigNumber : the current price of the pToken, in Dai Stablecoin.","title":"Returns"},{"location":"api/tokens/#betokentokensnotstablecoinsymbol","text":"","title":"betoken.tokens.notStablecoin(symbol)"},{"location":"api/tokens/#arguments_7","text":"symbol: String : the symbol of the asset you're querying.","title":"Arguments"},{"location":"api/tokens/#returns_8","text":"Boolean : true if the asset is not a stablecoin (or something you won't want to invest in, such as WETH), false otherwise.","title":"Returns"},{"location":"api/tokens/#betokentokensiscompoundtokensymbol","text":"","title":"betoken.tokens.isCompoundToken(symbol)"},{"location":"api/tokens/#arguments_8","text":"symbol: String : the symbol of the asset you're querying.","title":"Arguments"},{"location":"api/tokens/#returns_9","text":"Boolean : true if the asset supports Compound investments, false otherwise.","title":"Returns"},{"location":"api/tokens/#betokentokensisfulcrumtokensymbol","text":"","title":"betoken.tokens.isFulcrumToken(symbol)"},{"location":"api/tokens/#arguments_9","text":"symbol: String : the symbol of the asset you're querying.","title":"Arguments"},{"location":"api/tokens/#returns_10","text":"Boolean : true if the asset supports Fulcrum investments, false otherwise.","title":"Returns"},{"location":"api/tokens/#betokentokensfulcrumminstakesymbol-isshort","text":"","title":"betoken.tokens.fulcrumMinStake(symbol, isShort)"},{"location":"api/tokens/#arguments_10","text":"symbol: String : the symbol of the asset you're querying. isShort: Boolean : true for shorting, false for longing.","title":"Arguments"},{"location":"api/tokens/#returns_11","text":"BigNumber : the minimum Kairo needed to stake in a Fulcrum investment with the given parameters.","title":"Returns"},{"location":"api/user/","text":"betoken.user Provides info of the manager account. betoken.user.address() Returns String : the address of the user's Ethereum account. betoken.user.sharesBalance() Returns BigNumber : the user's Betoken Shares balance. betoken.user.sharesBalanceInDai() Returns BigNumber : the value of the user's Betoken Shares in Dai Stablecoin. betoken.user.kairoBalance() Returns BigNumber : the user's Kairo balance, not including the Kairo used as stake. betoken.user.tokenBalance(tokenSymbol) Arguments tokenSymbol: String : the symbol of the token you want to query. ETH is also supported. Returns BigNumber : the user's balance of the given token. betoken.user.monthlyRoi() Returns BigNumber : the user's ROI for the current investment cycle, in percent. Takes into account the value of the active investments. betoken.user.investmentList() Returns Array<Object> : list of the user's investments in the current investment cycle. The investment objects have the following properties: type: String : type of the investment, one of basic compound and fulcrum . id: Number : ID of the investment. Investments of type basic and fulcrum share an ID system, compound investments has its own. tokenSymbol: String : symbol of the token that the investment invests in. tokenAddress: String : different for each type: basic : address of the token fulcrum : address of the Fulcrum position token compound : address of the Compound cToken stake: BigNumber : amount of Kairo staked into the investment. buyPrice: BigNumber : different for each type: basic : price of the token at time of investment fulcrum : price of the Fulcrum position token at time of investment compound : unavaiable sellPrice: BigNumber : different for each type: basic : price of the token when the investment was sold, or the current price of the token if the investment is active. fulcrum : price of the Fulcrum position token when the investment was sold, or the current price of the Fulcrum position token if the investment is active. compound : unavailable ROI: BigNumber : the ROI of the investment when it was sold, or its current ROI if the investment is active, in percent. kroChange: BigNumber : the change of the Kairo staked in the investment since creation, equals stake * (ROI / 100) currValue: BigNumber : the current value of the Kairo staked in the investment, equals stake + kroChange buyTime: Date : the investment's time of creation. isSold: Boolean : whether or not the investment has been sold. The following properties are exclusive to fulcrum and compound investments: leverage: Number : amount of leverage of the investment, always positive orderType: Boolean : true for short investments, false for long investments safety: Boolean : different for each type: fulcrum : false if the position token's price is within 10% of the liquidation price, true otherwise compound : false if the collateral ratio is within 10% of the liquidation threshold, true otherwise The following properties are exclusive to fulcrum investments: liquidationPrice: BigNumber : the liquidation price of the Fulcrum position token. If the price is less than the liquidation price the position will be liquidated. The following properties are exclusive to compound investments: collateralRatio: BigNumber : the current collateral ratio of the Compound investment. currProfit: BigNumber : the current profit of the Compound investment, in Dai Stablecoin. currCollateral: BigNumber : the current collateral of the Compound investment, in Dai Stablecoin. currBorrow: BigNumber : the current debt of the Compound investment, in Dai Stablecoin. currCash: BigNumber : the current cash held by the Compound investment, in Dai Stablecoin. currLiquidity: BigNumber : the current liquidity of the Compound investment, in Dai Stablecoin. minCollateralRatio: BigNumber : the minimum collateral ratio the Compound investment needs to maintain to avoid liquidation. collateralAmountInDAI: BigNumber : the initial collateral given to the Compound investment at time of creation, in Dai Stablecoin. betoken.user.portfolioValue() Returns BigNumber : the user's Kairo balance, including the current value of the Kairo used as stake. betoken.user.riskTakenPercentage() Returns BigNumber : the risk taken by the manager, expressed in percentage of the Risk Threshold . betoken.user.commissionBalance() Returns BigNumber : the manager's current commission balance. Includes the unredeemed commission from all cycles.","title":"betoken.user"},{"location":"api/user/#betokenuser","text":"Provides info of the manager account.","title":"betoken.user"},{"location":"api/user/#betokenuseraddress","text":"","title":"betoken.user.address()"},{"location":"api/user/#returns","text":"String : the address of the user's Ethereum account.","title":"Returns"},{"location":"api/user/#betokenusersharesbalance","text":"","title":"betoken.user.sharesBalance()"},{"location":"api/user/#returns_1","text":"BigNumber : the user's Betoken Shares balance.","title":"Returns"},{"location":"api/user/#betokenusersharesbalanceindai","text":"","title":"betoken.user.sharesBalanceInDai()"},{"location":"api/user/#returns_2","text":"BigNumber : the value of the user's Betoken Shares in Dai Stablecoin.","title":"Returns"},{"location":"api/user/#betokenuserkairobalance","text":"","title":"betoken.user.kairoBalance()"},{"location":"api/user/#returns_3","text":"BigNumber : the user's Kairo balance, not including the Kairo used as stake.","title":"Returns"},{"location":"api/user/#betokenusertokenbalancetokensymbol","text":"","title":"betoken.user.tokenBalance(tokenSymbol)"},{"location":"api/user/#arguments","text":"tokenSymbol: String : the symbol of the token you want to query. ETH is also supported.","title":"Arguments"},{"location":"api/user/#returns_4","text":"BigNumber : the user's balance of the given token.","title":"Returns"},{"location":"api/user/#betokenusermonthlyroi","text":"","title":"betoken.user.monthlyRoi()"},{"location":"api/user/#returns_5","text":"BigNumber : the user's ROI for the current investment cycle, in percent. Takes into account the value of the active investments.","title":"Returns"},{"location":"api/user/#betokenuserinvestmentlist","text":"","title":"betoken.user.investmentList()"},{"location":"api/user/#returns_6","text":"Array<Object> : list of the user's investments in the current investment cycle. The investment objects have the following properties: type: String : type of the investment, one of basic compound and fulcrum . id: Number : ID of the investment. Investments of type basic and fulcrum share an ID system, compound investments has its own. tokenSymbol: String : symbol of the token that the investment invests in. tokenAddress: String : different for each type: basic : address of the token fulcrum : address of the Fulcrum position token compound : address of the Compound cToken stake: BigNumber : amount of Kairo staked into the investment. buyPrice: BigNumber : different for each type: basic : price of the token at time of investment fulcrum : price of the Fulcrum position token at time of investment compound : unavaiable sellPrice: BigNumber : different for each type: basic : price of the token when the investment was sold, or the current price of the token if the investment is active. fulcrum : price of the Fulcrum position token when the investment was sold, or the current price of the Fulcrum position token if the investment is active. compound : unavailable ROI: BigNumber : the ROI of the investment when it was sold, or its current ROI if the investment is active, in percent. kroChange: BigNumber : the change of the Kairo staked in the investment since creation, equals stake * (ROI / 100) currValue: BigNumber : the current value of the Kairo staked in the investment, equals stake + kroChange buyTime: Date : the investment's time of creation. isSold: Boolean : whether or not the investment has been sold. The following properties are exclusive to fulcrum and compound investments: leverage: Number : amount of leverage of the investment, always positive orderType: Boolean : true for short investments, false for long investments safety: Boolean : different for each type: fulcrum : false if the position token's price is within 10% of the liquidation price, true otherwise compound : false if the collateral ratio is within 10% of the liquidation threshold, true otherwise The following properties are exclusive to fulcrum investments: liquidationPrice: BigNumber : the liquidation price of the Fulcrum position token. If the price is less than the liquidation price the position will be liquidated. The following properties are exclusive to compound investments: collateralRatio: BigNumber : the current collateral ratio of the Compound investment. currProfit: BigNumber : the current profit of the Compound investment, in Dai Stablecoin. currCollateral: BigNumber : the current collateral of the Compound investment, in Dai Stablecoin. currBorrow: BigNumber : the current debt of the Compound investment, in Dai Stablecoin. currCash: BigNumber : the current cash held by the Compound investment, in Dai Stablecoin. currLiquidity: BigNumber : the current liquidity of the Compound investment, in Dai Stablecoin. minCollateralRatio: BigNumber : the minimum collateral ratio the Compound investment needs to maintain to avoid liquidation. collateralAmountInDAI: BigNumber : the initial collateral given to the Compound investment at time of creation, in Dai Stablecoin.","title":"Returns"},{"location":"api/user/#betokenuserportfoliovalue","text":"","title":"betoken.user.portfolioValue()"},{"location":"api/user/#returns_7","text":"BigNumber : the user's Kairo balance, including the current value of the Kairo used as stake.","title":"Returns"},{"location":"api/user/#betokenuserrisktakenpercentage","text":"","title":"betoken.user.riskTakenPercentage()"},{"location":"api/user/#returns_8","text":"BigNumber : the risk taken by the manager, expressed in percentage of the Risk Threshold .","title":"Returns"},{"location":"api/user/#betokenusercommissionbalance","text":"","title":"betoken.user.commissionBalance()"},{"location":"api/user/#returns_9","text":"BigNumber : the manager's current commission balance. Includes the unredeemed commission from all cycles.","title":"Returns"}]}